#!/usr/bin/python
# -*- python -*-

import sys
import pprint
from optparse import OptionParser
import json

from twisted.enterprise import adbapi
from twisted.internet import reactor
from twisted.web import resource, server
from twisted.web.resource import NoResource
from twisted.python import log

from smap import subscriber, reporting
from smap.server import RootResource
import smap.util as util
from smap.archiver import settings, data, api


class DataResource(resource.Resource):
    def __init__(self, db):
        self.db = db
        self.data = data.SmapData(db)
        resource.Resource.__init__(self)

    def _add_data(self, subid, obj):
        if len(obj) == 0: return True
        return self.data.add(subid, obj)

    def _check_subscriber(self, request, subid):
        if len(subid) == 1:
            subid = subid[0][0]
            obj = json.load(request.content)
            reporting.push_metadata(obj)
            return subid, obj
        else:
            request.setResponseCode(404)
            request.finish()
        return server.NOT_DONE_YET

    def getChild(self, name, request):
        return self

    def render_POST(self, request):
        d = self.db.runQuery("SELECT id FROM subscription WHERE key = %s", 
                             (request.prepath[-1],))
        d.addCallback(lambda x: self._check_subscriber(request, x))
        d.addCallback(lambda (subid, obj): self._add_data(subid, obj))
        def add_success(x):
            if not x:
                request.setResponseCode(500)
            request.finish()
        def add_error(x):
            # return a 500 so the sMAP server can hold onto the data
            # until things can be fixed.
            print x
            request.setResponseCode(500)
            request.finish()
        
        d.addCallback(add_success)
        d.addErrback(add_error)
        return server.NOT_DONE_YET

def _subscribe(result):
    """
    Called with list of sMAP sources to subscribes to
    Returns map of uuid => :py:class:`smap.subscriber.SmapSubcriber` instances 
    """
    subs = {}
    for (url, id, key) in result:
        dest = 'http://%s:%s/add/%s' % (settings.MY_LOCATION[0],
                                         settings.MY_LOCATION[1],
                                         key)
        s = subscriber.SmapSubscriber(url, dest, id=id, expire_time=None)
        s.subscribe()
        subs[id] = s
    return subs

def subscribe(db):
    d = db.runQuery('SELECT url, uuid, key FROM subscription WHERE url IS NOT NULL')
    d.addCallback(_subscribe)
    return d

def getSite(db):
    root = RootResource(value={'Contents': ['add', 'api']})
    root.putChild('add', DataResource(db))
    root.putChild('api', api.Api(db))
    return server.Site(root)


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-p', '--port', dest='port', default=settings.MY_LOCATION[1],
                      type='int', help='port to run server on')
    parser.add_option('-n', '--no-subscribe', dest='subscribe', default=True,
                      action='store_false')
    opts, args = parser.parse_args()

    # connect to the mysql db
    cp = adbapi.ConnectionPool('pgdb', # 'MySQLdb', 
                               host=settings.MYSQL_HOST,
                               database=settings.MYSQL_DB,
                               user=settings.MYSQL_USER,
                               password=settings.MYSQL_PASS,
                               cp_min=5, cp_max=15)
    print "opts.subscribe", opts.subscribe
    if opts.subscribe:
        subscribe(cp)
    site = getSite(cp)

    log.startLogging(sys.stdout)
    reactor.listenTCP(opts.port, site)
    reactor.run()
